# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oPwYFxw4GRUoqUCzJ7phVnhrseMywxM-
"""

import pandas as pd
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
import pickle

fake = pd.read_csv('Fake.csv')
true = pd.read_csv('True.csv')

fake['label'] = 0
true['label'] = 1

df = pd.concat(([fake, true]),ignore_index=True)
df = df.sample(frac=1, random_state=42).reset_index(drop=True)

print(df.columns)

def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

df['combined_text'] = df['title'] + " " + df['text']
df['clean_text'] = df['combined_text'].apply(clean_text)

X_train, X_test, y_train, y_test = train_test_split(
    df['clean_text'], df['label'], test_size=0.2, random_state=42, stratify=df['label'])

vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

rf_models = {"Logistic Regression": LogisticRegression(max_iter=500),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(n_estimators=100)}

results = []

for name, model in rf_models.items():
    model.fit(X, y_train)
    y_pred = model.predict(X_test_tfidf)
    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred)
    rec = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    results.append({
        "Model": name,
        "Accuracy": acc,
        "Precision": prec,
        "Recall": rec,
        "F1 Score": f1
    })
    print(f"\n{name} Classification Report:")
    print(classification_report(y_test, y_pred))

results_df = pd.DataFrame(results)
results_df = results_df.drop_duplicates(subset=['Model'])

results_df.set_index('Model')[['Accuracy', 'Precision', 'Recall', 'F1 Score']].plot.bar(figsize=(10,6))
plt.title('Fake News Detection Model Performance')
plt.ylim(0.8, 1.0)
plt.ylabel('Score')
plt.show()

with open("rf_model.pkl", "wb") as f:
    pickle.dump(model, f)

with open("vectorizer.pkl", "wb") as f:
    pickle.dump(vectorizer, f)